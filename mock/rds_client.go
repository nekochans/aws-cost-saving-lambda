// Code generated by MockGen. DO NOT EDIT.
// Source: infrastructure/rds_client.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	rds "github.com/aws/aws-sdk-go-v2/service/rds"
	gomock "github.com/golang/mock/gomock"
)

// MockRdsClient is a mock of RdsClient interface.
type MockRdsClient struct {
	ctrl     *gomock.Controller
	recorder *MockRdsClientMockRecorder
}

// MockRdsClientMockRecorder is the mock recorder for MockRdsClient.
type MockRdsClientMockRecorder struct {
	mock *MockRdsClient
}

// NewMockRdsClient creates a new mock instance.
func NewMockRdsClient(ctrl *gomock.Controller) *MockRdsClient {
	mock := &MockRdsClient{ctrl: ctrl}
	mock.recorder = &MockRdsClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRdsClient) EXPECT() *MockRdsClientMockRecorder {
	return m.recorder
}

// StopDBCluster mocks base method.
func (m *MockRdsClient) StopDBCluster(ctx context.Context, params *rds.StopDBClusterInput, optFns ...func(*rds.Options)) (*rds.StopDBClusterOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, params}
	for _, a := range optFns {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "StopDBCluster", varargs...)
	ret0, _ := ret[0].(*rds.StopDBClusterOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StopDBCluster indicates an expected call of StopDBCluster.
func (mr *MockRdsClientMockRecorder) StopDBCluster(ctx, params interface{}, optFns ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, params}, optFns...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StopDBCluster", reflect.TypeOf((*MockRdsClient)(nil).StopDBCluster), varargs...)
}
